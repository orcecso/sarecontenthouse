{
  "appTitle": "Mobile Exam",
  "examAppBarTitle": "Exam Screen",
  "homeHint1ButtonLabel":"Hint 1",
  "homeHint2ButtonLabel":"Hint 2",
  "homeExamButtonLabel":"Exam",
  "homeDescriptionTitle":"Congratulations!",
  "homeDescriptionBody":"You have passed your first task - setting up the Flutter environment and running the app on your local. \n\nYour next task is to create an Exam screen and connect it to the Exam button below. \n\nYour are required to display an image, a text message, and a counter button on the Exam screen. \n\nFor the counter button, it should add 1 to the counter when it is tapped.\n\nYou can use the hints below to get more information about your task.",
  "hint1AppbarTitle":"Hint 1",
  "hint1Description":"Hint 1 will help you to understand the code structure.\n\nPlease note: you are not required to understand all the code to complete your task but you are required to follow the code structure. \n\nThe code structure you are given is based on the app we are building. Folder structures and code layouts are extracted from the final app. Following is a detailed explanation of folder structure. \n\n.\\lib \nThis is the root folder of all code as per Flutter standard. \n\n.\\lib\\components \nAll shared widgets go here. \n\n.\\lib\\core \nFundational, utility, and business logic code go here. \n\n.\\lib\\core\\app\\routes.dart \nThis file controls the routing of the app. You need to add a route entry here for your Exam screen. \n\n.\\lib\\core\\services \nMost of the business logic code goes here. \n\n.\\lib\\l10n \nApp text goes here. We are using localization files to store text data displayed in the app. \n\n.\\lib\\screens \nScreen widgets go here. Each screen should have a route entry in the routes.dart file. \n\n.\\lib\\screens\\[screen_name] \nThe root of the screen code. Typically, this folder contains a 'main.dart' file, a 'bloc.dart' file, a 'views' folder, and sometimes a 'components' folder. \n\n.\\lib\\screens\\[screen name]\\main.dart \nThis is the entry of the screen widget. It hosts the bloc object in its state. Our app uses Bloc and Cubit to manage screen states. \n\n.\\lib\\screens\\[screen name]\\bloc.dart \nThis is the logic block of the screen. Most of the non-UI-related code goes here. \n\n.\\lib\\screens\\[screen name]\\views \nScreen widgets go here. It contains different views of widgets based on the screen state, such as error view, loading view, edit view etc. Use Bloc to rebuild views when the screen state changes. \n\n.\\libs\\screens\\[screens name]\\components \nAny shared widgets with in the screen goes here.",
  "hint2AppbarTitle":"Hint 2",
  "hint2ErrorMessage":"There is an error loading this screen. \n\nFix the error to see the hint.",
  "hint2Description":"Hint 2 will help you to complete your task. \n\n1. You should platten the Hint 2 screen (copy folders and code) to create your Exam screen. This should give you a good screen template to start with. \n\n2. All data you need to display can be fetched from context.server.data, similar to the way hint 2 fetches the access key. \n\n3. You should use context.server.addToCount() to store your counter. \n\n4. You can use bloc provider to watch your status change for refreshing your counter. Or you can build your own state management.",
  "pressTheButtonMagic": "Press the button to see the magic!"
}